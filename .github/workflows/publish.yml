name: Publish

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  wait:
    name: Wait for Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Wait for Flake8 Test
        id: wait1
        uses: fountainhead/action-wait-for-check@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Flake8"
          ref: ${{ github.event.push_request.head.sha || github.sha }}
      - name: Wait for mypy Test
        id: wait2
        uses: fountainhead/action-wait-for-check@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "mypy"
          ref: ${{ github.event.push_request.head.sha || github.sha }}
    outputs:
      conclusion: ${{ steps.wait1.outputs.conclusion == 'success' && steps.wait2.outputs.conclusion == 'success' }}

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: wait
    if: ${{ needs.wait.outputs.conclusion == 'true' }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10.1"
      - uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: "1.1.12"
      - name: Build and publish
        env:
          PYPI_USERNAME: __token__
          PYPI_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-root
          poetry publish --build --username $PYPI_USERNAME --password $PYPI_PASSWORD
      - name: Save dist
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Get Tag
        id: tag
        uses: olegtarasov/get-tag@v2.1.1
      - name: Build Release File
        id: release
        env:
          TAG_NAME: ${{ steps.tag.outputs.tag }}
        run: |
          touch RELEASE.md
          PREVIOUS_TAG="$(git tag -l --sort=-version:refname | head -2 | tail -1)"
          echo "Full changelog: https://github.com/$GITHUB_REPOSITORY/compare/$PREVIOUS_TAG...$TAG_NAME" >> RELEASE.md
          cat RELEASE.md
          printf "\n\n## Dist Files\n"
          ls -l dist
          echo "::set-output name=tag::$TAG_NAME"
          echo "::set-output name=release_body::RELEASE.md"
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.release.outputs.tag }}
          name: ${{ steps.release.outputs.tag }}
          body_path: ${{ steps.release.outputs.release_body }}
          files: |
            dist/*